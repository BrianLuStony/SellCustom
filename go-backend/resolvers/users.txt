package resolvers

import (
	"context"
	"go-backend/db"
	"go-backend/models"

	"github.com/graph-gophers/graphql-go"
)

func (r *Resolver) Users(ctx context.Context) ([]*UserResolver, error) {
	rows, err := db.DB.Query("SELECT id, email, first_name, last_name, created_at FROM users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []*UserResolver
	for rows.Next() {
		var u models.User
		if err := rows.Scan(&u.ID, &u.FirstName, &u.LastName, &u.Email); err != nil {
			return nil, err
		}
		users = append(users, &UserResolver{u})
	}

	return users, nil
}

func (r *Resolver) User(ctx context.Context, args struct{ ID graphql.ID }) (*UserResolver, error) {
	var u models.User
	err := db.DB.QueryRow("SELECT id, name, email, created_at FROM users WHERE id = $1", args.ID).Scan(&u.ID, &u.Name, &u.Email, &u.CreatedAt)
	if err != nil {
		return nil, err
	}
	return &UserResolver{u}, nil
}

func (r *Resolver) CreateUser(ctx context.Context, args struct{ Input models.UserInput }) (*UserResolver, error) {
	tx, err := db.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()

	var userID int
	err = tx.QueryRow(`
        INSERT INTO users (name, email, created_at)
        VALUES ($1, $2, NOW())
        RETURNING id
    `, args.Input.Name, args.Input.Email).Scan(&userID)
	if err != nil {
		return nil, err
	}

	if err = tx.Commit(); err != nil {
		return nil, err
	}

	var u models.User
	err = db.DB.QueryRow(`
        SELECT id, name, email, created_at
        FROM users WHERE id = $1
    `, userID).Scan(&u.ID, &u.Name, &u.Email, &u.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &UserResolver{u}, nil
}
